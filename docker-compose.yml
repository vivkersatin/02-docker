# c:\learn2\02-docker\docker-compose.yml

services:
  db:
    image: postgres:13-alpine
    container_name: fastapi_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432" # Optional: Expose DB port for local access/debugging
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d fastapi_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  web:
    build: .
    container_name: fastapi_web_app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload # --reload for development
    volumes:
      - .:/app # Mount the current directory into the container for live reloading
    ports:
      - "8001:8000" # 將主機的 8001 埠口映射到容器的 8000 埠口
    environment:
      DB_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      SECRET_KEY: ${SECRET_KEY}
    depends_on:
      db:
        condition: service_healthy # Ensure DB is ready before starting web app

  frontend:
    build: ./frontend
    container_name: fastapi_frontend
    ports:
      - "8080:80" # 將主機的 8080 埠口映射到容器的 80 埠口
    volumes:
      - ./frontend:/usr/share/nginx/html # Mount the frontend directory into the container

  create_user:
    build: .
    container_name: create_user_service
    command: python create_user.py
    volumes:
      - .:/app
    environment:
      DB_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
    profiles: ["create_user"] # Use a profile to run this service only when explicitly requested

volumes:
  postgres_data:
